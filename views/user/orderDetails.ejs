<%- include("../partials/user/header.ejs") %>

<main class="main">
    <nav aria-label="breadcrumb" class="breadcrumb-nav mb-2">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/userProfile">Account</a></li>
                <li class="breadcrumb-item"><a href="/myOrders">My Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">Order Details</li>
            </ol>
        </div><!-- End .container -->
    </nav><!-- End .breadcrumb-nav -->
    <div class="page-header text-center" style="background-image: url('/assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Order Details</h1>
        </div>
    </div>

    <div class="page-content">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <!-- Order ID and Status -->
                            <h3 class="card-title">Order ID: <%= order.orderId %></h3>
                            <button onclick="downloadInvoice('<%= order._id %>')" class="btn btn-outline-success btn-sm float-right">Download Invoice</button>
                            <p class="lead"><strong>Status:</strong> <%= order.status %></p>

                            <!-- Order Summary -->
                            <h5>Order Summary:</h5>
                            <ul class="list-unstyled">
                                <li><strong>Total Items:</strong> <%= order.orderedItems.length %></li>
                                <li><strong>Payment Method:</strong> <%= order.paymentMethod %></li>
                                <% if (order.discount > 0) { %>
                                    <li><strong>Discount Applied:</strong> ₹<%= order.discount.toFixed(2) %></li>
                                <% } %>
                                <li><strong>Shipping Fee:</strong> ₹60</li>
                                <li><strong>Final Price:</strong> ₹<%= order.totalPrice.toFixed(2) %></li>
                                <li><strong>Date Ordered:</strong> <%= order.createdAt.toLocaleDateString() %></li>
                            </ul>

                            <!-- Shipping Address -->
                            <h5>Shipping Address:</h5>
                            <address class="lead">
                                <strong><%= order.address[0].name %></strong><br>
                                <%= order.address[0].addressType %><br>
                                <%= order.address[0].city %>, <%= order.address[0].state %> - <%= order.address[0].pincode %><br>
                                Phone: <%= order.address[0].phone %><br>
                                <% if (order.address[0].email) { %>
                                    Email: <%= order.address[0].email %><br>
                                <% } %>
                            </address>
                        </div>
                    </div>
                    <!-- Action Buttons (Cancel Order if Pending) -->
            <div class="text-center mt-4">
                <% if(order.paymentMethod==="Payment Pending"){ %>
                    <button onclick='retryPayment(<%= JSON.stringify(order) %>)' class="btn btn-outline-danger">Retry Payment</button>
                    <% } %>
                <% if (order.status === 'Pending' && order.paymentMethod !== 'Payment Pending') { %>
                    <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-outline-danger">Cancel Order</button>
                <% } %>
                <% if (order.status === "Delivered") { %>
                    <button onclick="returnOrder('<%= order._id %>')" class="btn btn-outline-danger">Return Order</button>
                <% } %>
                <a href="/myOrders" class="btn btn-outline-primary btn-lg">Back to Orders</a>
            </div>
                </div>

                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <!-- Ordered Items -->
                            <h5>Items in this Order:</h5>
                            <ul class="list-group">
                                <% order.orderedItems.forEach(item => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="/productImages/<%= item.productId.productImage[0] %>" alt="Product Image" class="img-thumbnail" style="width: auto; height: 120px; object-fit: cover;">
                                            <div class="ml-3">
                                                <h6><strong><a href="/productPage?id=<%= item.productId._id %>"><%= item.productId.productName %></a></strong></h6>
                                                Quantity: <%= item.quantity %><br>
                                                Price: ₹<%= ( item.price/item.quantity ).toFixed(2)%><br>
                                                <strong>Status:</strong> <%= item.status %>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-column align-items-end">
                                            <% if (item.status === 'Pending') { %>
                                                <button onclick="cancelProduct('<%= order._id %>', '<%= item.productId._id %>')" class="btn btn-sm btn-outline-danger mt-2">Cancel</button>
                                            <% } else if (item.status === 'Delivered') { %>
                                                <button onclick="returnProduct('<%= order._id %>', '<%= item.productId._id %>')" class="btn btn-sm btn-outline-danger mt-2">Return</button>
                                            <% } %>
                                        </div>
                                    </li>
                                <% }) %>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    async function cancelOrder(orderId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to cancel this order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.post('/cancelOrder', { orderId });

                if (response.data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Cancelled!',
                        text: 'Your order has been successfully cancelled.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/myOrders';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Unable to cancel the order. Please try again later.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while cancelling the order. Please try again.'
                });
            }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire({
                title: 'Cancelled',
                text: 'Your order is safe!',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }
    }

    async function retryPayment(orderData) {
    console.log("Order data received:", orderData); // Debugging line

    // Check if order data is valid
    if (!orderData || !orderData.finalPrice) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Order not found or invalid order data. Please try again later.'
        });
        return;
    }

    // Create the Razorpay order with the final price
    try {
        const razorpayOrder = await axios.post('/placeRazorpayOrder', {
            totalPrice: orderData.finalPrice, // Amount should be in paise
            currency: "INR",
            receipt: orderData.orderId // Use a unique receipt ID
        });
        console.log("Razorpay order response:", razorpayOrder.data); // Debugging line

        if (razorpayOrder.data.success) {
            const options = {
                key: razorpayOrder.data.key_id,
                amount: razorpayOrder.data.order.amount/100,
                currency: "INR",
                name: "Epicreads",
                description: "Order Payment",
                order_id: razorpayOrder.data.order.id, // Razorpay Order ID
                
                handler: async function (response) {
                    const updateOrderResponse = await axios.post('/updatePaymentMethod', {
                        orderId: orderData.orderId, // Correctly referencing orderId
                        paymentMethod: 'Razorpay',
                        paymentId: response.razorpay_payment_id // Pass the payment ID
                    });

                    if (updateOrderResponse.data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful!',
                            text: 'Your payment has been processed successfully.',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload(); // Reload to see updated order
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to update payment method. Please try again.'
                        });
                    }
                },
                theme: {
                    color: "#3399cc"
                }
            };
            console.log("options:", options)

            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            throw new Error('Failed to create Razorpay order.');
        }
    } catch (error) {
        console.error("Error during payment process:", error); // Log the error for debugging
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response ? error.response.data.message : 'Something went wrong, please try again!'
        });
    }
}

async function returnOrder(orderId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to return this order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.post('/returnOrder', { orderId });
                if (response.data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Returned!',
                        text: 'Your return request has been successfully submitted.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Unable to process return request. Please try again later.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while processing the return request. Please try again.'
                });
            }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire({
                title: 'Cancelled',
                text: 'Your return request has been cancelled!',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }
    }

    async function cancelProduct(orderId, productId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to cancel this product?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.post('/cancelProduct', { orderId, productId });

                if (response.data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Cancelled!',
                        text: 'The product has been successfully cancelled.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Unable to cancel the product. Please try again later.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while cancelling the product. Please try again.'
                });
            }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire({
                title: 'Cancelled',
                text: 'The product cancellation was aborted.',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }
    }

    async function returnProduct(orderId, productId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to return this product?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.post('/returnProduct', { orderId, productId });

                if (response.data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Requested!',
                        text: 'The product has been successfully marked for return.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Unable to process the return. Please try again later.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while processing the return. Please try again.'
                });
            }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire({
                title: 'Cancelled',
                text: 'The product return request was aborted.',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }
    }

</script>
<script>
  // Make sure orderId is passed properly when triggering the download
  const downloadInvoice = async (orderId) => {
    console.log("Attempting to download invoice for orderId:", orderId);  // Log to check the orderId

    if (!orderId) {
        alert("Order ID is missing");
        return;
    }

    try {
        // Send the orderId in the body of the POST request
        const response = await axios.post('/downloadInvoice', { orderId }, {
            responseType: 'blob',  // Set the response type to Blob for binary data
        });

        if (response.status === 200) {
            // Create a Blob from the response data (which is the PDF content)
            const blob = response.data;
            const link = document.createElement('a');
            
            // Create an object URL for the blob
            const url = window.URL.createObjectURL(blob);

            // Set up the link to download the PDF
            link.href = url;
            link.download = `${orderId}-invoice.pdf`;  // Name of the downloaded file

            // Programmatically trigger the download
            link.click();

            // Revoke the object URL to free up memory
            window.URL.revokeObjectURL(url);

            // Show success message
            Swal.fire({
                icon: 'success',
                title: 'Invoice Ready',
                text: 'Your invoice is ready. You can download it now.',
                confirmButtonText: 'OK'
            });

        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: response.data.message || 'Failed to generate the invoice. Please try again later.',
            });
        }
    } catch (error) {
        console.error('Failed to download invoice:', error);

        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to download the invoice. Please try again later.'
        });
    }
};

</script>

